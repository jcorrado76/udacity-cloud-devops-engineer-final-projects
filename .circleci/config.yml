version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy backend server stack
          command: |
            aws cloudformation delete-stack \
              --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Delete contents of S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            sleep 20
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy frontend stack and S3 bucket
          command: aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>

  revert_migrations:
    description: Revert the last migration if our current workflow successfully executed
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -H "token: 42e1762c-a623-4f06-925b-fde63ccf6689" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
          when: << parameters.when >>

jobs:
  destroy-frontend-backend-stacks:
    executor: aws
    steps:
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_success
  hold:
    executor: aws
    steps:
      - run:
          name: A dummy hold job
          command: |
            echo 0
          when: on_success

  install-frontend-dependencies:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-v2]
      - run:
          name: Install frontend dependencies
          working_directory: ./frontend
          command: ls -al && npm install
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build-v2
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules

  install-backend-dependencies:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-v2]
      - run:
          name: Install backend dependencies
          working_directory: ./backend
          command: ls -al && npm install
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-build-v2
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules

  build-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build frontend
          working_directory: ./frontend
          command: ls -al && npm run build

  build-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build backend
          working_directory: ./backend
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  test-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
#      - run:
#          name: Test frontend code
#          working_directory: ./frontend
#          command: npm run test
#          environment:
#            JEST_JUNIT_OUTPUT_DIR: ./test_results
#      - store_test_results:
#          path: ./frontend/test_results
#      - store_artifacts:
#          path: ./frontend/test_results

  test-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
#      - run:
#          name: Test backend code
#          working_directory: ./backend
#          command: npm run test
#          environment:
#            JEST_JUNIT_OUTPUT_DIR: ./test_results
#      - store_test_results:
#          path: ./backend/test_results
#      - store_artifacts:
#          path: ./backend/test_results

  scan-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
#      - run:
#          name: Scan frontend code
#          working_directory: ./frontend
#          command:
#            npm i
#            npm audit fix --audit-level=critical --force
#            npm audit --audit-level=critical

  scan-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
#      - run:
#          name: Scan backend code
#          working_directory: ./backend
#          command: |
#            npm audit fix --audit-level=critical --force
#            npm audit --audit-level=critical

  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install tar utility to use CircleCI workspace
          command: |
            yum install tar gzip -y
      - run:
          name: Deploy back-end infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Deploy front-end infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            ls -al .
            if [[ -f "inventory.txt" ]]; then
                  rm inventory.txt;
            fi
            echo "[web]" > inventory.txt
            PublicIp=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
            echo $PublicIp
            echo $PublicIp >> inventory.txt
            cat inventory.txt
      - run:
          name: Save URL to backend server in memstash
          command: |
            BACKEND_IPv4=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)

            echo $BACKEND_IPv4

            curl -H "Content-Type: text/plain" -H "token: 42e1762c-a623-4f06-925b-fde63ccf6689" \
              --request PUT --data "http://$BACKEND_IPv4:3030" https://api.memstash.io/values/BACKEND_URL
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "a8:64:4c:1a:aa:1f:e1:89:0d:d4:29:80:2e:5a:ab:07" ]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible
      # we're attaching workspace at .
      # but since the path we saved it as on our workspace was .circleci/ansible/inventory.txt
      # that's where we'll need to retrieve our inventory.txt file from
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd
            ls -al
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  run-migrations:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          working_directory: ./backend
          command: npm run migrations > migration_status
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration was successful, will update memstash..."
              curl -H "Content-Type: text/plain" -H "token: 42e1762c-a623-4f06-925b-fde63ccf6689" --request PUT --data "success" https://api.memstash.io/values/migration_{CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: 42e1762c-a623-4f06-925b-fde63ccf6689" --request PUT --data "failure" https://api.memstash.io/values/migration_{CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-frontend:
    executor: node
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: .
      - run:
          name: Get backend url
          working_directory: ./frontend
          command: |
            # your code here
            export API_URL=$(curl -H "token: 42e1762c-a623-4f06-925b-fde63ccf6689" \
              --request GET https://api.memstash.io/values/BACKEND_URL)
            echo "${API_URL}"
            npm run build
      - run:
          name: Copy built frontend objects to S3
          working_directory: ./frontend
          command: aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive

      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "a8:64:4c:1a:aa:1f:e1:89:0d:d4:29:80:2e:5a:ab:07" ]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            pip install awscli
      - run:
          name: Ansible deploy backend server
          working_directory: ./.circleci/ansible
          command: |
            cat inventory.txt
            ls -al ../../backend
            ansible-playbook -i inventory.txt deploy-server.yml -vv
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  smoke-test:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_URL=$(curl -H "token: 42e1762c-a623-4f06-925b-fde63ccf6689" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo $BACKEND_URL
            curl "$BACKEND_URL/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-2.amazonaws.com/index.html"
            curl -s ${URL} | grep -q "Welcome"

      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  cloudfront-update:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y curl
      - run:
          name: Grab previous WorkFlow ID and store in memstash
          working_directory: ./circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: 42e1762c-a623-4f06-925b-fde63ccf6689" --request PUT --data "$WorkflowID" https://api.memstash.io/values/WorkflowID

      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name cdn-udacity-proj-stack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(curl -H "token: 42e1762c-a623-4f06-925b-fde63ccf6689" --request GET https://api.memstash.io/values/WorkflowID)
            export CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "Deleting previous stack"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID"
            fi

workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies
      - build-frontend:
          requires:
            - install-frontend-dependencies
      - build-backend:
          requires:
            - install-backend-dependencies
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # from here on, only run if you're a commit to master
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      - hold:
          requires: [deploy-backend, deploy-frontend]
          type: approval
      - destroy-frontend-backend-stacks:
          requires: [hold]